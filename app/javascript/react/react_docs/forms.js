console.log("components_and_props.js loaded...");
//////////// https://reactjs.org/docs/forms.html
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////// **************** Forms  ******************  /////////////
////////////// **************** Forms  ******************  /////////////
////////////// **************** Forms  ******************  /////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

import { render } from "react-dom"
import h from "react/htm_create_element"

// HTML form elements work a bit differently from other DOM elements in React, because form elements naturally keep some internal state. For example, this form in plain HTML accepts a single name:

// <form>
//   <label>
//     Name:
//     <input type="text" name="name" />
//   </label>
//   <input type="submit" value="Submit" />
// </form>

// This form has the default HTML form behavior of browsing to a new page when the user submits the form. If you want this behavior in React, it just works.
//
//  But in most cases, it’s convenient to have a JavaScript function that handles the submission of the form and has access to the data that the user entered into the form.
//
//  The standard way to achieve this is with a technique called “controlled components”.


////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
//////////////   Controlled Components         ////////////////////////
//////////////   Controlled Components         ////////////////////////
//////////////   Controlled Components         ////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
